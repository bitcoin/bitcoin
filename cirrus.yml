env: Global defaults
  CIRRUS_CLONE_DEPTH: 1
  CIRRUS_LOG_TIMESTAMP: true
  MAKEJOBS: "-j10"
  TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
  CI_FAILFAST_TEST_LEAVE_DANGLING: "1"  # Cirrus CI does not care about dangling processes and setting this variable avoids killing the CI script itself on 
  skip: $SKIP_BRANCH_PUSH == "true" && $CIRRUS_PR == ""
  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks

base_template: &BASE_TEMPLATE
  << : *FILTER_TEMPLATE
  merge_base_script:
    # Require git (used in fingerprint_script).
    - git --version || ( apt-get update && apt-get install -y git )
    - if [ "$CIRRUS_PR" = "" ]; then exit 0; fi
    - git fetch --depth=1 $CIRRUS_REPO_CLONE_URL "pull/${CIRRUS_PR}/merge"
    - git checkout FETCH_HEAD  # Use merged changes to detect silent merge conflicts
                               # Also, the merge commit is used to lint COMMIT_RANGE="HEAD~..HEAD"

main_template: &MAIN_TEMPLATE
  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out
  ci_script:
    - ./ci/test_run_all.sh

global_task_template: &GLOBAL_TASK_TEMPLATE
  << : *BASE_TEMPLATE
  << : *MAIN_TEMPLATE

compute_credits_template: &CREDITS_TEMPLATE
  # https://cirrus-ci.org/pricing/#compute-credits
  # Only use credits for pull requests to the main repo
  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != ""

task:
  name: 'lint'
  << : *BASE_TEMPLATE
  container:
    dockerfile: ci/lint_imagefile
    cpu: 1
    memory: 1G
  # For faster CI feedback, immediately schedule the linters
  << : *CREDITS_TEMPLATE
  unshallow_script:
    - git fetch --unshallow --no-tags
  lint_script:
    - ./ci/lint_run.sh

task:
  name: 'tidy'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_tidy.sh"

task:
  name: 'ARM, unit tests, no functional tests'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: arm64  # Use arm64 worker to sidestep qemu and avoid a slow CI: https://github.com/bitcoin/bitcoin/pull/28087#issuecomment-1649399453
  env:
    FILE_ENV: "./ci/test/00_setup_env_arm.sh"

task:
  name: 'CentOS, depends, gui'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_centos.sh"

task:
  name: 'previous releases, depends DEBUG'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_previous_releases.sh"

task:
  name: 'TSan, depends, gui'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_tsan.sh"

task:
  name: 'MSan, depends'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  timeout_in: 300m  # Use longer timeout for the *rare* case where a full build (llvm + msan + depends + ...) needs to be done.
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_msan.sh"

task:
  name: 'fuzzer,address,undefined,integer, no depends'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  timeout_in: 240m  # larger timeout, due to the high CPU demand
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_fuzz.sh"

task:
  name: 'multiprocess, i686, DEBUG'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_i686_multiprocess.sh"

task:
  name: 'no wallet, libbitcoinkernel'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_nowallet_libbitcoinkernel.sh"

task:
  name: 'macOS-cross, gui, no tests'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_mac_cross.sh"
