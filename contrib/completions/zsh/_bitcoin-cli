#compdef bitcoin-cli
#- zsh completion for bitcoin-cli(1)
# Copyright (c) 2025-present The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# call bitcoin-cli for RPC
_bitcoin_rpc() {
    # determine already specified args necessary for RPC
    local rpcargs=()
    local -a words_array
    words_array=(${(z)BUFFER})

    for i in $words_array; do
        case "$i" in
            -conf=*|-datadir=*|-regtest|-rpc*|-testnet|-testnet4)
                rpcargs+=("$i")
                ;;
        esac
    done

    $bitcoin_cli "${rpcargs[@]}" "$@"
}

_bitcoin-cli() {
    local context state line
    local bitcoin_cli="$words[1]"

    # Handle specific argument positions for various commands
    if (( CURRENT > 5 )); then
        case ${words[CURRENT-4]} in
            sendtoaddress)
                _values 'subtractfeefromamount' 'true' 'false'
                return 0
                ;;
        esac
    fi

    if (( CURRENT > 4 )); then
        case ${words[CURRENT-3]} in
            importaddress|listtransactions|setban)
                _values 'boolean' 'true' 'false'
                return 0
                ;;
            signrawtransactionwithkey|signrawtransactionwithwallet)
                _values 'sighashtype' 'ALL' 'NONE' 'SINGLE' 'ALL|ANYONECANPAY' 'NONE|ANYONECANPAY' 'SINGLE|ANYONECANPAY'
                return 0
                ;;
        esac
    fi

    if (( CURRENT > 3 )); then
        case ${words[CURRENT-2]} in
            addmultisigaddress)
                return 0
                ;;
            getbalance|gettxout|importaddress|importpubkey|importprivkey|listreceivedbyaddress|listsinceblock)
                _values 'boolean' 'true' 'false'
                return 0
                ;;
        esac
    fi

    if (( CURRENT > 2 )); then
        case ${words[CURRENT-1]} in
            addnode)
                _values 'command' 'add' 'remove' 'onetry'
                return 0
                ;;
            setban)
                _values 'command' 'add' 'remove'
                return 0
                ;;
            fundrawtransaction|getblock|getblockheader|getmempoolancestors|getmempooldescendants|getrawtransaction|gettransaction|listreceivedbyaddress|sendrawtransaction)
                _values 'verbose' 'true' 'false'
                return 0
                ;;
        esac
    fi

    # Handle previous word completions
    case "${words[CURRENT-1]}" in
        backupwallet|dumpwallet|importwallet)
            _files
            return 0
            ;;
        getaddednodeinfo|getrawmempool|lockunspent)
            _values 'boolean' 'true' 'false'
            return 0
            ;;
        getbalance|getnewaddress|listtransactions|sendmany)
            return 0
            ;;
    esac

    # Handle current word completions
    case "$words[CURRENT]" in
        -conf=*)
            local conf_path=${words[CURRENT]#-conf=}
            _files -W ${conf_path:h} -g "*"
            return 0
            ;;
        -datadir=*)
            local datadir_path=${words[CURRENT]#-datadir=}
            _files -/ -W ${datadir_path:h}
            return 0
            ;;
        -*=*)
            # prevent nonsense completions
            return 0
            ;;
        *)
            local helpopts commands
            local -a opts

            # only parse -help if sensible (empty or starts with -)
            if [[ -z "$words[CURRENT]" || "$words[CURRENT]" == -* ]]; then
                helpopts="$($bitcoin_cli -help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, "="); print $1 }')"
                opts+=(${(f)helpopts})
            fi

            # only parse help if sensible (empty or starts with letter)
            if [[ -z "$words[CURRENT]" || "$words[CURRENT]" == [a-z]* ]]; then
                commands="$(_bitcoin_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')"
                opts+=(${(f)commands})
            fi

            _describe 'bitcoin-cli options and commands' opts

            return 0
            ;;
    esac
}

# Function is now defined and will be called by zsh completion system

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
